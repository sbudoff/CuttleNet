library(tidyverse)
file = "/home/sam/scRNAseq/Xenium/Network_genes_NoiseInjection.RData"
load(file)
gene_rename_map <- list(
Prcd = "Gm11744",
Tafa3 = "Fam19a3",
# Sertm2 = "A730046J19Rik",
Tafa1 = "Fam19a1",
Ccn1 = "Cyr61"
)
jrgc <- Retina_expMatrix_candidateGenes %>%
filter(Cluster == "5_J-RGC") %>%
select(-Cluster, -Dataset)
# Example for plotting the first gene
ggplot(data = data.frame(Expression = jrgc[,1]), aes(x = Expression)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Density Plot of Gene 1", x = "Expression Level", y = "Density")
# Test modality for each column
library(diptest)
results <- apply(jrgc, 2, function(x) {
test <- dip.test(x)
p.value <- test$p.value
is.unimodal <- p.value > 0.05  # Assuming alpha = 0.05 for significance
return(list(p.value = p.value, is.unimodal = is.unimodal))
})
summary_df <- do.call(rbind, lapply(names(results), function(name) {
data.frame(Gene = name,
P_Value = results[[name]]$p.value,
Is_Unimodal = results[[name]]$is.unimodal)
}))
JRGC_unimodal <- sum(summary_df$Is_Unimodal)
unimodal_counter <- function(subtype) {
subtype_df <- Retina_expMatrix_candidateGenes %>%
filter(Cluster == subtype) %>%
select(-Cluster, -Dataset)
results <- apply(subtype_df, 2, function(x) {
test <- dip.test(x)
p.value <- test$p.value
is.unimodal <- p.value > 0.05  # Assuming alpha = 0.05 for significance
return(list(p.value = p.value, is.unimodal = is.unimodal))
})
summary_df <- do.call(rbind, lapply(names(results), function(name) {
data.frame(Gene = name,
P_Value = results[[name]]$p.value,
Is_Unimodal = results[[name]]$is.unimodal)
}))
sum(summary_df$Is_Unimodal)
}
# Initialize an empty data frame with appropriate column names
modality <- data.frame(Subtype = character(), Uni = numeric(), stringsAsFactors = FALSE)
# Loop over each unique subtype in the 'Cluster' column
for (st in unique(Retina_expMatrix_candidateGenes$Cluster)) {
val <- unimodal_counter(st)
# Append the subtype and its computed value to the 'modality' data frame
modality <- rbind(modality, data.frame(Subtype = st, Uni = val))
}
library(tidyverse)
file = "/home/sam/scRNAseq/Xenium/Network_genes_NoiseInjection.RData"
load(file)
gene_rename_map <- list(
Prcd = "Gm11744",
Tafa3 = "Fam19a3",
# Sertm2 = "A730046J19Rik",
Tafa1 = "Fam19a1",
Ccn1 = "Cyr61"
)
tran_path = '/home/sam/scRNAseq/Xenium/Tran_GeneMapping.csv'
tran_df <- read_csv(tran_path)
tran_genes <- unique(c(tran_df$Gene1, tran_df$Gene2, tran_df$Gene3))
Network_genes <- Retina_expMatrix_candidateGenes %>%
dplyr::select(-Cluster, -Dataset) %>%
colnames()
# int_genes <- intersect(tran_genes, Network_genes)
#
# int_df <- Retina_expMatrix_candidateGenes %>%
#   select(Cluster, int_genes)
Predictor <- function(key, cells, thresh = 0) {
# Extract relevant vectors to work with
genes <- na.omit(c(key$Gene1, key$Gene2, key$Gene3))
presence <- na.omit(c(key$Gene1Weight, key$Gene2Weight, key$Gene3Weight))
target <- key$Subtype
truth <- cells$Cluster
# Confirm all genes for the Tran prediction are present
if (length(genes) != length(intersect(genes, colnames(cells)))) {
return(NA)
}
# Subset cell df to just the relevant genes
cells <- cells %>%
dplyr::select(all_of(genes)) %>%
mutate(Pred = 0)
# Go through each gene and see if it meets the criteria
for (i in 1:length(genes)) {
if (thresh == 'mean') {
t = mean(cells[[genes[i]]])
} else if (thresh == '50th') {
t = median(cells[[genes[i]]])
} else if (thresh == '75th') {
t = quantile(cells[[genes[i]]], probs = 0.75)
} else if (thresh == '90th') {
t = quantile(cells[[genes[i]]], probs = 0.90)
} else {
t = thresh
}
cells <- cells %>%
mutate(Pred = Pred + case_when(presence[i] == 1 ~ !!sym(genes[i]) > t,
T ~ !!sym(genes[i]) <= t))
}
# Compute the F1 score
F1 <- cells %>%
mutate(Pred = Pred == length(genes),
Truth = truth == target,
TP = as.integer(Pred == 1 & Truth == 1),
FP = as.integer(Pred == 1 & Truth == 0),
TN = as.integer(Pred == 0 & Truth == 0),
FN = as.integer(Pred == 0 & Truth == 1)) %>%
summarise(F1 = (2 * sum(TP)) / (2 * sum(TP) + sum(FP) + sum(FN))) %>%
pull(F1)
return(F1)
}
F1_df <- data.frame(Subtype = tran_df$Subtype)
for (m in c(0, '50th', '75th', '90th')){
col <- c()
for (i in 1:nrow(tran_df)) {
temp<-Predictor(tran_df[i,], Retina_expMatrix_candidateGenes, thresh = m)
col <- c(col, temp)
}
F1_df[[m]] <- col
}
common_targets <- F1_df %>%
na.omit() %>%
pull(Subtype)
meta <- c("Class", "Cluster", "Experiment", "NumEpochs", "L1Lambda", "EarlyStopping", "ArmLength")
thresh = 0.8
network <- read_csv('/home/sam/scRNAseq/Xenium/AlonNN/NoiseInj/Merged_Experiments_DeepSkip.csv') %>%
filter(arm_length != "none") %>%
mutate(Class = as.factor(Class),
Cluster = as.factor(Cluster),
NumEpochs = as.factor(num_epochs),
L1Lambda = as.factor(l1_lambda),
EarlyStopping = as.factor(early_stopping),
ArmLength = as.factor(arm_length)) %>%
dplyr::select(-c(num_epochs, l1_lambda, early_stopping, arm_length, ClassWeight, deltaRate)) %>%
mutate(across(-all_of(meta), as.numeric),
Subtype = case_when(
substr(Cluster, 1, 1) == "0" ~ sub("^0+", "", Cluster),
TRUE ~ Cluster)) %>%
filter(Subtype %in% common_targets,
L1Lambda ==  0,
EarlyStopping == 50,
ArmLength == 3,
skip == 1) %>%
dplyr::select(Subtype, mean_F1) %>%
rename(Network = "mean_F1")
F1_df <- F1_df %>%
na.omit() %>%
left_join(network, by = 'Subtype') %>%
gather("GeneThreshold", "F1", -Subtype)
F1_df %>%
ggplot(aes(x=GeneThreshold, y=F1)) +
geom_boxplot() +
geom_jitter(aes(color = Subtype), alpha=0.4) +
ggtitle("Comparison of Network Chosen & Human Chosen Gene Targets") +
theme_classic()
library(ggsignif)
# Perform ANOVA
anova_model <- aov(F1 ~ GeneThreshold, data = F1_df)
anova_summary <- summary(anova_model)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(anova_model)
# Extract the pairwise comparisons and p-values
tukey_df <- as.data.frame(tukey_result$GeneThreshold)
tukey_df$comparison <- rownames(tukey_df)
tukey_df <- tukey_df %>%
mutate(significance = case_when(
`p adj` < 0.001 ~ "***",
`p adj` < 0.01 ~ "**",
`p adj` < 0.05 ~ "*",
TRUE ~ ""
))
# Filter out empty significance levels
significant_comparisons <- tukey_df %>%
filter(significance != "") %>%
dplyr::select(comparison, significance)
# Create a list of comparisons and corresponding significance levels
comparison_list <- strsplit(as.character(significant_comparisons$comparison), "-")
annotations_list <- significant_comparisons$significance
# Determine y-position for the annotations
y_positions <- c(1.2, 1.25, 1.3, 1.35, 1.4, 1.45)  # Adjust y-positions as needed
# Add statistical significance annotations
plot <- F1_df %>%
ggplot(aes(x = GeneThreshold, y = F1)) +
geom_boxplot() +
geom_jitter(aes(color = Subtype), alpha = 0.4) +
# ggtitle("Comparison of Network Chosen & Human Chosen Gene Targets") +
theme_classic() +
geom_signif(
comparisons = comparison_list,
map_signif_level = TRUE,
y_position = y_positions[1:length(comparison_list)],
annotations = annotations_list
)
